# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12LHUiTTEyhKJCMDIrV1EWJfN4Ym-owzy

#LGMVIP August Data Science Internship task 1
Stock Market Prediction And Forecasting Using Stacked LSTM _ (Uday Dogiparthi)

#Importhing Libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dense
from tensorflow.python.keras.layers import LSTM
# %matplotlib inline

"""#Collection of Data"""

data = pd.read_csv("https://raw.githubusercontent.com/mwitiderrick/stockprice/master/NSE-TATAGLOBAL.csv")
data.head()

data.tail()

df = data.reset_index()['Open']
df.head()

df.shape

plt.subplots(figsize = (30,10))
plt.plot(df , color ="black")
plt.title("Open")

"""#Preprocessing of Data(Train and Test)"""

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0,1))
df=scaler.fit_transform(np.array(df).reshape(-1,1))

print(df)

# Calculate training and testing sizes
training_size = int(len(df) * 0.75)
testing_size = len(df) - training_size

# Split data into train and test sets
train_data = df[:training_size, :]
test_data = df[training_size:, :1]

# Display training and testing sizes
print("Training Size:", training_size)
print("Testing Size:", testing_size)

def dataset(dataset, time_step=1):
	dataX, dataY = [], []

	for i in range(len(dataset)-time_step-1):
		a = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100
		dataX.append(a) # if steps = 100 then, 0-99 here
		dataY.append(dataset[i + time_step, 0]) # 100th element here as label

	return np.array(dataX), np.array(dataY)

time_step = 100 # taking previous 100 elements in consideration.

X_train, y_train = dataset(train_data, time_step)
X_test, ytest = dataset(test_data, time_step)

print(X_train.shape), print(y_train.shape)

print(X_test.shape), print(ytest.shape)

"""#Creating an Stacked LSTM Model."""

X_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)
X_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM


# defining the sequential model

model=Sequential()

model.add(LSTM(50,return_sequences=True,input_shape=(X_train.shape[1],1)))
model.add(LSTM(50,return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))

model.compile(loss='mean_squared_error', optimizer='adam')


model.summary()

model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=100,batch_size=64,verbose=1)

"""#Predict the test data and plot the output."""

train_predict=model.predict(X_train)
test_predict=model.predict(X_test)


# Transforming the results back to original scale

train_predict=scaler.inverse_transform(train_predict)
test_predict=scaler.inverse_transform(test_predict)


# Computing the RSME matrices


math.sqrt(mean_squared_error(y_train,train_predict))

from sklearn.metrics import mean_squared_error
import math

# Calculate the root mean squared error
rmse = math.sqrt(mean_squared_error(ytest, test_predict))

math.sqrt(mean_squared_error(ytest,test_predict))

# Plotting the results

# shift train predictions for plotting
look_back=100 #timestamp
trainPredictPlot = np.empty_like(df)
trainPredictPlot[:, :] = np.nan
trainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict

# shift test predictions for plotting
testPredictPlot = np.empty_like(df)
testPredictPlot[:, :] = np.nan
testPredictPlot[len(train_predict)+(look_back*2)+1:len(df)-1, :] = test_predict

# plotting the train_predict and test_predict on the same plot as true data.
plt.plot(scaler.inverse_transform(df)) # to scale the data back to original scale.
plt.plot(trainPredictPlot)
plt.plot(testPredictPlot)
plt.show()

"""#Predict the stock price for future 30 days."""

len(test_data)

x_input=test_data[413:].reshape(1,-1)
x_input.shape

temp_input=list(x_input)
temp_input=temp_input[0].tolist()

# demonstrate prediction for next 30 days
from numpy import array

lst_output=[]
n_steps=96
i=0
while(i<30):

    if(len(temp_input)>96):
        #print(temp_input)
        x_input=np.array(temp_input[1:])
        print("{} day input {}".format(i,x_input))
        x_input=x_input.reshape(1,-1)
        x_input = x_input.reshape((1, n_steps, 1))
        #print(x_input)
        yhat = model.predict(x_input, verbose=0)
        print("{} day output {}".format(i,yhat))
        temp_input.extend(yhat[0].tolist())
        temp_input=temp_input[1:]
        #print(temp_input)
        lst_output.extend(yhat.tolist())
        i=i+1
    else:
        x_input = x_input.reshape((1, n_steps,1))
        yhat = model.predict(x_input, verbose=0)
        print(yhat[0])
        temp_input.extend(yhat[0].tolist())
        print(len(temp_input))
        lst_output.extend(yhat.tolist())
        i=i+1


print(lst_output)

day_new=np.arange(1,101)
day_pred=np.arange(101,131)


len(df)
plt.plot(day_new,scaler.inverse_transform(df[1935:]))
plt.plot(day_pred,scaler.inverse_transform(lst_output))

# to get better visualization: -

df_b=df.tolist()
df_b.extend(lst_output)
plt.plot(df_b[1900:])